@startwbs functions

<style>
node {
    Padding 12
    MaximumWidth 140
}
</style>


* Provide an autenticated server to the git-lfs client
** F1. \nExpose api
*** F1.1. \nHandle SSH connexions
*** F1.2. \nAccept git commands
*** F1.3. \nServe git-lfs apis
*** F1.4. \nServe large objects
*** F1.5. \nHandle admin SSH connexions

** F2. \nProtect git
*** F2.1. \nAuthenticate user
*** F2.2. \nAuthorize user to access repo
**** F2.2.1. \nAuthorize user to read repo
**** F2.2.2. \nAuthorize user to write repo
*** F2.1. \nGenerate stateless proof of access

** F3. \nExecute git commands

** F4. \nHandle locks
*** F4.1. \nCreate lock
*** F4.2. \nList locks
*** F4.3. \nList locks for verfication
*** F4.4. \nDelete lock


@endwbs

@startwbs functions2

<style>
node {
    Padding 12
    MaximumWidth 140
}
</style>


* Provide an autenticated server to the git-lfs client

** F5. \nProtect LFS api
*** F5.1. \nVerify Proof of access
*** F5.2. \nGenerate download/upload signed links
*** F5.3. \nVerify signed links

** F6. \nStore large objects
*** F6.1. \nVerify object existence
*** F6.2. \nReceive object
*** F6.3. \nSend object

** F7. \nAdminister repository and users
*** F7.1. \nUpdate repositories
*** F7.2. \nUpdate users
*** F7.3. \nAffect users to repositories

** F8. \nManage the system
*** F8.1. \nDeploy the system
*** F8.2. \nMonitor the system
*** F8.3. \nUpdate the system
*** F8.4. \nBackup the system
*** F8.5. \nRestore the system
*** F8.6. \nConfigure the system


@endwbs

@startuml detailed_flow

!include <archimate/Archimate>

' Elements

Grouping(f1, "Expose api") {
    Business_Function(f11, "F1.1. Handle SSH connexions")
    Business_Function(f12, "F1.2. Accept git commands")
    Business_Function(f14, "F1.4. Serve large objects")
    Business_Function(f13, "F1.3. Serve git-lfs apis")
}

Grouping(f2, "Protect git") {
    Business_Function(f21, "F2.1. Authenticate user")
    Business_Function(f22, "F2.2. Authorize user to access repo")
    Business_Function(f221, "F2.2.1. Authorize user to read repo")
    Business_Function(f222, "F2.2.2. Authorize user to write repo")
    Business_Function(f23, "F2.3. Generate stateless proof of access")
}

    Business_Function(f3, "F.3. Execute git commands")

Grouping(f4, "Handle locks") {
    Business_Function(f41, "F4.1. Create lock")
    Business_Function(f42, "F4.2. List locks")
    Business_Function(f43, "F4.3. List locks for verfication")
    Business_Function(f44, "F4.4. Delete lock")
}

Grouping(f5, "Protect LFS api") {
    Business_Function(f51, "F5.1. Verify Proof of access")
    Business_Function(f52, "F5.2. Generate download/upload signed links")
    Business_Function(f53, "F5.3. Verify signed links")
}

Grouping(f6, "Store large objects") {
    Business_Function(f61, "F6.1. Verify object existence")
    Business_Function(f62, "F6.2. Upload object")
    Business_Function(f63, "F6.3. Download object")
}

actor client as "developer"

Rel_Flow(client, f11, "ssh connexion,\ngit command")
Rel_Flow(f11, f12, "ssh pub key,\ngit command")
Rel_Flow_Left(f12, f21, "ssh pub key,\ngit command")
Rel_Flow(f21, f22, "user, repo,\ngit command")
Rel_Flow_Up(f22, f23, "repo,\ngit-lfs-authenticate")
Rel_Flow_Right(f23, f11, "proof of access\n(POA)")
Rel_Flow(f11, client, "POA")

Rel_Realization_Up(f221, f22)
Rel_Realization_Up(f222, f22)

Rel_Flow_Down(client, f14, "signed link,\nobject?")

Rel_Flow_Down(client, f13, "git-lfs\ncommands,\nPOA")
Rel_Flow_Down(f13, f51, "POA")
Rel_Flow_Right(f51, f52, "POA")
Rel_Flow_Up(f52, f13, "signed link,\nobject?")
Rel_Flow_Up(f13, client, "signed link")

Rel_Flow_Down(f14, f53, "signed link,\nobject?")
Rel_Flow_Up(f53, f14, "object?")

Rel_Flow_Down(f51, f4, "command")
Rel_Flow_Down(f52, f61, "path")
Rel_Flow_Up(f61, f52, "exists")

Rel_Flow_Down(f53, f62, "path,\nobject")
Rel_Flow_Down(f53, f63, "path")
Rel_Flow_Up(f63, f53, "object")

Rel_Flow_Down(f22, f3, "git\ncommand")
Rel_Flow_Up(f3, f11, "git\nresponse")
Rel_Flow_Up(f11, client, "git\nresponse")

@enduml

@startuml overwiew_flow

skinparam nodesep 100
skinparam ranksep 100

!include <archimate/Archimate>

' Elements

Business_Function(f1, "F1. Expose api")

Business_Function(f2, "F2. Protect git")

Business_Function(f3, "F3. Execute git commands")

Business_Function(f4, "F4. Handle locks")

Business_Function(f5, "F5. Protect LFS api")

Business_Function(f6, "F6. Store large objects")

actor client as "developer"

Rel_Flow_Down(client, f1, "connexion,\ngit command\nPOA?\nsigned link?\nobject?")
Rel_Flow_Up(f1, client, "response")

Rel_Flow_Left(f1, f2, "ssh pub key,\ngit command")
Rel_Flow_Right(f2, f1, "proof of access\n(POA)")

Rel_Flow_Down(f1, f5, "request, POA/signed link")
Rel_Flow_Down(f5, f1, "response")


Rel_Flow_Down(f5, f4, "command")
Rel_Flow_Up(f4, f1, "response")
Rel_Flow_Up(f6, f5, "exists")

Rel_Flow_Down(f5, f6, "path,\nobject?")
Rel_Flow_Up(f6, f5, "object")

Rel_Flow_Down(f2, f3, "git\ncommand")
Rel_Flow_Up(f3, f1, "\nresponse")

@enduml


@startuml simple_git_flow

!include <archimate/Archimate>

' Elements

Grouping(f1, "Expose api") {
    Business_Function(f11, "F1.1. Handle SSH connexions")
    Business_Function(f12, "F1.2. Accept git commands")
}

Grouping(f2, "Protect git") {
    Business_Function(f21, "F2.1. Authenticate user")
    Business_Function(f22, "F2.2. Authorize user to access repo")
    Business_Function(f221, "F2.2.1. Authorize user to read repo")
    Business_Function(f222, "F2.2.2. Authorize user to write repo")
}

Business_Function(f3, "F3. Execute git commands")


actor client as "developer"

Rel_Flow(client, f11, "ssh connexion,\ngit command")
Rel_Flow(f11, f12, "ssh pub key,\ngit command")
Rel_Flow_Left(f12, f21, "ssh pub key,\ngit command")
Rel_Flow_Up(f21, f22, "user, repo,\ngit command")

Rel_Flow_Right(f22, f3, "git\ncommand")
Rel_Flow_Down(f3, f11, "git\nresponse")
Rel_Flow_Up(f11, client, "git\nresponse")

Rel_Realization_Up(f221, f22)
Rel_Realization_Up(f222, f22)

@enduml

@startuml simple_git_flow_sequence

actor client as "developer"

participant "F1.1" as f11
participant "F1.2" as f12

participant "F2.1" as f21
participant "F2.2" as f22

participant "F3" as f3


client -> f11 : ssh connexion,\ngit command
f11 -> f12 : ssh pub key, repo,\ngit command
f12 -> f21 : ssh pub key, repo,\ngit command
f21 --> f12 : user
f12 -> f22 : user, repo,\ngit command
f22 --> f12 : authorized
f12 -> f3 : git\ncommand
f3 --> client : git\nresponse


@enduml

@startuml POA_flow

!include <archimate/Archimate>

' Elements

Grouping(f1, "Expose api") {
    Business_Function(f11, "F1.1. Handle SSH connexions")
    Business_Function(f12, "F1.2. Accept git commands")
}

Grouping(f2, "Protect git") {
    Business_Function(f21, "F2.1. Authenticate user")
    Business_Function(f22, "F2.2. Authorize user to access repo")
    Business_Function(f221, "F2.2.1. Authorize user to read repo")
    Business_Function(f222, "F2.2.2. Authorize user to write repo")
    Business_Function(f23, "F2.3. Generate stateless proof of access")
}

actor client as "developer"

Rel_Flow_Right(client, f11, "ssh connexion,\ngit-lfs-authenticate")
Rel_Flow(f11, f12, "ssh pub key,\ngit-lfs-authenticate")
Rel_Flow_Down(f12, f21, "ssh pub key,\ngit-lfs-authenticate")
Rel_Flow_Right(f21, f22, "user, repo,\ngit-lfs-authenticate")
Rel_Flow_Up(f22, f23, "repo,\ngit-lfs-authenticate")
Rel_Flow_Left(f23, f11, "proof of access\n(POA)")
Rel_Flow_Up(f11, client, "POA")

Rel_Realization_Up(f221, f22)
Rel_Realization_Up(f222, f22)

@enduml

@startuml poa_flow_sequence

actor client as "developer"

participant "F1.1" as f11
participant "F1.2" as f12

participant "F2.1" as f21
participant "F2.2" as f22

participant "F2.3" as f23


client -> f11 : ssh connexion,\ngit-lfs-authenticate operation
f11 -> f12 : ssh pub key, repo,\ngit-lfs-authenticate operation
f12 -> f21 : ssh pub key
f21 --> f12 : user
f12 -> f22 : user, repo,\ngit-lfs-authenticate operation
f22 --> f12 : authorized
f12 -> f23 : user, repo, operation
f23 --> client : stateless proof of access


@enduml

@startuml signed_link_flow

!include <archimate/Archimate>

' Elements

Grouping(f1, "Expose api") {
    Business_Function(f14, "F1.4. Serve large objects")
    Business_Function(f13, "F1.3. Serve git-lfs apis")
}

Grouping(f4, "Handle locks") {
    Business_Function(f41, "F4.1. Create lock")
    Business_Function(f42, "F4.2. List locks")
    Business_Function(f43, "F4.3. List locks for verfication")
    Business_Function(f44, "F4.4. Delete lock")
}

Grouping(f5, "Protect LFS api") {
    Business_Function(f51, "F5.1. Verify Proof of access")
    Business_Function(f52, "F5.2. Generate download/upload signed links")
    Business_Function(f53, "F5.3. Verify signed links")
}

Grouping(f6, "Store large objects") {
    Business_Function(f61, "F6.1. Verify object existence")
    Business_Function(f62, "F6.2. Upload object")
    Business_Function(f63, "F6.3. Download object")
}

actor client as "developer"

Rel_Flow_Down(client, f14, "signed link,\nobject?")
Rel_Flow_Down(client, f13, "git-lfs\ncommands,\nPOA")
Rel_Flow_Up(f13, client, "signed link")

Rel_Flow_Down(f13, f51, "POA")
Rel_Flow_Down(f51, f52, "POA")
Rel_Flow_Up(f52, f13, "signed link,\nobject?")

Rel_Flow_Down(f14, f53, "signed link,\nobject?")
Rel_Flow_Up(f53, f14, "object?")

Rel_Flow_Right(f51, f4, "command")
Rel_Flow_Down(f52, f61, "path")
Rel_Flow_Up(f61, f52, "exists")

Rel_Flow_Down(f53, f62, "path,\nobject")
Rel_Flow_Down(f53, f63, "path")
Rel_Flow_Up(f63, f53, "object")

@enduml


@startuml signed_link_flow_serve_seq


actor client as "developer"

participant "F1.3.\nServe\ngit-lfs apis" as f13

participant "F5.1.\nVerify\nProof of access" as f51
participant "F5.2.\nGenerate\ndownload/upload signed links" as f52

participant "F1.4.\nServe\nlarge objects" as f14

participant "F6.1.\nVerify\nobject existence" as f61
participant "F5.3.\nVerify\nsigned links" as f53

participant "F6.2.\nUpload\nobject" as f62
participant "F6.3.\nDownload\nobject" as f63

== Get link ==

client -> f13: repo, git-lfs\ncommands,\nPOA
f13 -> f51: POA
f51 --> f13: OK
f13 -> f52: command, repo, POA
f52 -> f61: path
f61 --> f52: exists
f52 --> client: signed link

== Download ==

client -> f14: signed download link
f14 -> f53: signed download link
f53 --> f14: OK

f53 -> f63: path
f63 --> client: object

== Upload ==

client -> f14: signed upload link
f14 -> f53: signed upload link
f53 --> f14: OK

f14 -> f62: path,\nobject
f62 --> client: OK


@enduml

@startuml signed_link_flow_locks_seq


actor client as "developer"

participant "F1.3.\nServe git-lfs apis" as f13

participant "F5.1.\nVerify Proof of access" as f51

participant "F4.\nHandle locks" as f4

client -> f13: git-lfs locks\ncommands,\nPOA
f13 -> f51: POA
f51 --> f13: OK

f13 -> f4: command
f4 --> client: response

@enduml
